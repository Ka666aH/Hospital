using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Информационная_система_для_больницы.Data;

namespace Информационная_система_для_больницы.Pages.Nurse
{
    /// <summary>
    /// Логика взаимодействия для NursePatients.xaml
    /// </summary>
    public partial class NursePatients : Page
    {
        Data.AppContext db;

        public static MainWindow main = (MainWindow)Application.Current.MainWindow;

        bool appointmentAddMode = false;

        Registration selectedPatient = null;
        CollectingIndicator selectedIndicator = null;
        PatientCondition selectedCondition = null;   
        Appointment selectedAppointment = null;
        Schedule selectedSchedule = null;

        bool conditionAddMode;

        string completed = "Выполнено";
        string uncompleted = "Не выполнено";

        #region Основа
        public NursePatients()
        {
            InitializeComponent();
            SetData();
        }

        public void SetData()
        {
            db = new Data.AppContext();
            nursePatientsCurrentPatientsAmount.Content = $"Количество текущих госпитализаций : {GetCurrentRegistration().Count()}";

            nursePatientsSearchPatient.Items.Clear();
            nursePatientsSearchPatient.Items.Add(string.Empty);
            foreach (var item in (GetCurrentRegistration().Select(r => r.patient?.fullName).ToList()))
            {
                nursePatientsSearchPatient.Items.Add(item);   
            }

            nursePatientsSearchWard.Items.Clear();
            nursePatientsSearchWard.Items.Add(string.Empty);
            foreach (var item in (GetCurrentRegistration().Select(x => x.bed.ward).Distinct().ToList()))
            {
                nursePatientsSearchWard.Items.Add(item);

            }
            //nursePatientsSearchPatient.ItemsSource = GetCurrentRegistration().Select(r => r.patient.fullName).ToList();
            //nursePatientsSearchWard.ItemsSource = GetCurrentRegistration().Select(x => x.bed.ward).Distinct().ToList();
            SetPatientsDataGrid();
        }

        public List<Registration> GetCurrentRegistration()
        {
            var registrations = db.Registrations.ToList();
            var patients = from r in registrations
                           where string.IsNullOrEmpty(r.end) || Convert.ToDateTime(r.end) > DateTime.Today
                           select r;
            return patients.ToList();
        }

        public void SetPatientsDataGrid()
        {
            var patients = (from r in GetCurrentRegistration()
                            where (string.IsNullOrEmpty(nursePatientsSearchPatient.Text) || r.patient?.fullName == nursePatientsSearchPatient.Text) && (string.IsNullOrEmpty(nursePatientsSearchWard.Text) || r.bed.ward == nursePatientsSearchWard.Text)
                            select new
                            {
                                Id = r.id,
                                Ward = Convert.ToInt32(r.bed.ward),
                                Bed = Convert.ToInt32(r.bed.bed),
                                Patient = r.patient?.fullName,
                                Doctor = r.doctor?.fullName,
                            }).ToList().OrderBy(x => x.Ward).ThenBy(x => x.Bed).ThenBy(x => x.Patient);

            nursePatientsDataGrid.ItemsSource = patients;
            nursePatientsDataGrid.SelectedIndex = 0;
        }

        private void nursePatientsSearchPatient_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            SetPatientsDataGrid();
        }

        private void nursePatientsSearchWard_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            SetPatientsDataGrid();
        }
        private void nursePatientsDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            nursePatientsDataGrid.Columns[0].Header = "Идентификатор";
            nursePatientsDataGrid.Columns[1].Header = "Палата";
            nursePatientsDataGrid.Columns[2].Header = "Кровать";
            nursePatientsDataGrid.Columns[3].Header = "Пациент";
            nursePatientsDataGrid.Columns[4].Header = "Лечащий врач";
            
            nursePatientsDataGrid.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsDataGrid.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsDataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsDataGrid.Columns[3].Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            nursePatientsDataGrid.Columns[4].Width = new DataGridLength(1, DataGridLengthUnitType.Star);

            nursePatientsDataGrid.Columns[0].Visibility = Visibility.Collapsed;

            nursePatientsDataGrid.SelectedIndex = 0;
        }

        private void nursePatientsDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {

            if (nursePatientsDataGrid.SelectedIndex == -1)
            {
                nursePatientsListShowCondition.IsEnabled = false;
                nursePatientsListShowSchedule.IsEnabled = false;
                selectedPatient = null;
            }
            else
            {
                dynamic _selectedPatient = nursePatientsDataGrid.SelectedItem;
                string _id = _selectedPatient.Id;
                selectedPatient = db.Registrations.Where(x => x.id == _id).FirstOrDefault();

                nursePatientsListShowCondition.IsEnabled = true;
                nursePatientsListShowSchedule.IsEnabled = true;
            }
        }

        private void nursePatientsMainPart_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if(nursePatientsMainPart.IsEnabled == true)
            SetData();
        }
        #endregion
        #region Состояние

        private void nursePatientsListShowCondition_Click(object sender, RoutedEventArgs e)
        {
            nursePatientsConditionstLabel.Content = $"Состояние пациента \"{db.Registrations.Where(x => x.id == selectedPatient.id).Select(x => x.patient.fullName).FirstOrDefault()}\"";

            var indicators = db.CollectingIndicators.Where(x => x.registrationId == selectedPatient.id).Select(x => x.indicator.name).ToList();
            nursePatientsConditionsIndicatorsList.ItemsSource = indicators;

            if(nursePatientsConditionsIndicatorsList.Items.Count>0)
            {
                nursePatientsConditionsIndicatorsList.SelectedIndex = 0;
            }

            OpenConditonsForm();
        }
        private void nursePatientsConditionsIndicatorsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            SetConditions();
        }

        public void SetConditions()
        {
            selectedIndicator = db.CollectingIndicators.Where(x => x.registrationId == selectedPatient.id && x.indicatorId == db.Indicators.Where(y => y.name == nursePatientsConditionsIndicatorsList.SelectedValue.ToString()).Select(y => y.id).FirstOrDefault()).FirstOrDefault();

            var _conditions = db.PatientConditions.Where(x => x.collectingIndicatorId == selectedIndicator.id).ToList();
            var conditions = (from pc in _conditions
                              orderby Convert.ToDateTime(pc.dateTime) descending
                              select new
                              {
                                  Id = pc.id,
                                  DateAndTime = Convert.ToDateTime(pc.dateTime).ToString("dd.MM.yyyy HH:mm"),
                                  Value = pc.value,
                                  Note = pc.note
                              })/*.OrderByDescending(x => x.DateAndTime)*/.ToList();

            nursePatientsConditionsDataGrid.ItemsSource = conditions;
        }

        private void nursePatientsConditionsDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            if (nursePatientsConditionsDataGrid.SelectedIndex == -1)
            {
                nursePatientsConditionsAlter.IsEnabled = false;
                nursePatientsConditionsDelete.IsEnabled = false;
                selectedCondition = null;
            }
            else
            {
                dynamic _selectedCondition = nursePatientsConditionsDataGrid.SelectedItem;
                string _id = _selectedCondition.Id;
                selectedCondition = db.PatientConditions.Where(x => x.id == _id).FirstOrDefault();

                nursePatientsConditionsAlter.IsEnabled = true;
                nursePatientsConditionsDelete.IsEnabled = true;
            }
        }

        private void nursePatientsConditionsDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            nursePatientsConditionsDataGrid.Columns[0].Header = "Идентификатор";
            nursePatientsConditionsDataGrid.Columns[1].Header = "Дата и время";
            nursePatientsConditionsDataGrid.Columns[2].Header = "Значение";
            nursePatientsConditionsDataGrid.Columns[3].Header = "Дополнительная информация";

            nursePatientsConditionsDataGrid.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsConditionsDataGrid.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsConditionsDataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsConditionsDataGrid.Columns[3].Width = new DataGridLength(1, DataGridLengthUnitType.Star);

            nursePatientsConditionsDataGrid.Columns[0].Visibility = Visibility.Collapsed;

            nursePatientsConditionsDataGrid.SelectedIndex = 0;
        }
        private void nursePatientsConditionsFormClose_Click(object sender, RoutedEventArgs e)
        {
            CloseConditonsForm();
        }
        public void OpenConditonsForm()
        {
            nursePatientsMainPart.IsEnabled = false;
            SetConditions();
            nursePatientsConditionsForm.Visibility = Visibility.Visible;
        }

        public void CloseConditonsForm()
        {
            nursePatientsConditionsForm.Visibility = Visibility.Collapsed;
            nursePatientsMainPart.IsEnabled = true;
        }
        private void nursePatientsConditionsAdd_Click(object sender, RoutedEventArgs e)
        {
            conditionAddMode = true;
            OpenConditonForm();
        }
        private void nursePatientsConditionsAlter_Click(object sender, RoutedEventArgs e)
        {
            conditionAddMode = false;

            //nursePatientsConditionsDataGrid.ItemsSource = null;
            nursePatientsConditionFormDateTime.Value = Convert.ToDateTime(selectedCondition.dateTime);
            nursePatientsConditionFormValue.Text = selectedCondition.value;
            nursePatientsConditionFormNote.Text = selectedCondition.note;

            OpenConditonForm();
        }
        private void nursePatientsConditionsDelete_Click(object sender, RoutedEventArgs e)
        {
            MessageBoxResult result = MessageBox.Show($"Вы уверены, что хотите безвозвратно удалить эту запись о значении показателя?", "Удаление записи состояния", MessageBoxButton.YesNo);
            if (result == MessageBoxResult.Yes)
            {
                db.PatientConditions.Attach(selectedCondition);
                db.Entry(selectedCondition).State = EntityState.Deleted;
                db.SaveChanges();
                //SetData();
                SetConditions();
            }
        }

        public void OpenConditonForm()
        {
            nursePatientsConditionsForm.IsEnabled = false;
            nursePatientsConditionFormDateTime.Value = DateTime.Now;
            nursePatientsConditionForm.Visibility = Visibility.Visible;
        }
        public void CloseConditonForm()
        {
            SetConditions();
            nursePatientsConditionForm.Visibility = Visibility.Collapsed;
            nursePatientsConditionFormDateTime.Value = null;
            nursePatientsConditionFormValue.Text = string.Empty;
            nursePatientsConditionFormNote.Text = string.Empty;
            nursePatientsConditionsForm.IsEnabled = true;
        }
        private void nursePatientsConditionsForm_IsEnabledChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if(nursePatientsConditionsForm.IsEnabled)
                SetConditions();
        }

        #region Форма состояния
        private void nursePatientsConditionFormAccept_Click(object sender, RoutedEventArgs e)
        {
            if(!string.IsNullOrEmpty(nursePatientsConditionFormDateTime.Text) && !string.IsNullOrEmpty(nursePatientsConditionFormValue.Text))
            {
            DateTime dateAndTime = Convert.ToDateTime(nursePatientsConditionFormDateTime.Text);
            if(dateAndTime>Convert.ToDateTime(selectedPatient.start) && (string.IsNullOrEmpty(selectedPatient.end) || dateAndTime < Convert.ToDateTime(selectedPatient.end)))
            {
                    if(double.TryParse(nursePatientsConditionFormValue.Text.Replace('.', ',').Trim(),out double value))
                    {
                        if(db.PatientConditions.Where(x => x.collectingIndicatorId == selectedIndicator.id && x.dateTime == nursePatientsConditionFormDateTime.Text).Count() == 0)
                        {
                        PatientCondition patientCondition = new PatientCondition();

                        patientCondition.collectingIndicatorId = selectedIndicator.id;
                        patientCondition.dateTime = dateAndTime.ToString("dd.MM.yyyy HH:mm");
                        patientCondition.value = value.ToString();
                        patientCondition.note = nursePatientsConditionFormNote.Text;

                        if(conditionAddMode)
                        {
                            patientCondition.id = Guid.NewGuid().ToString();
                            db.PatientConditions.Add(patientCondition);
                        }
                        else
                        {
                            patientCondition.id = selectedCondition.id;
                            db.PatientConditions.AddOrUpdate(patientCondition);
                        }
                        db.SaveChanges();
                        CloseConditonForm();
                        }
                        else
                        {
                            MessageBox.Show("Запись на это время уже существует");
                        }
                    }
                    else
                    {
                        MessageBox.Show("Содержимое поля \"Значение\" должно быть числовым");
                    }
                }
            else
            {
                    MessageBox.Show("Дата не может быть раньше начала или позднее конца периода госпитализации");
            }
            }
            else
            {
                MessageBox.Show("Необходимо заполнить все обязательные поля");
            }
        }

        private void nursePatientsConditionFormCancel_Click(object sender, RoutedEventArgs e)
        {
            CloseConditonForm();
        }

        #endregion

        #endregion
        #region Расписания
        private void nursePatientsListShowSchedule_Click(object sender, RoutedEventArgs e)
        {
            OpenSchedulesForm();
        }

        private void nursePatientsSchedulesAppointmentsDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            if (nursePatientsSchedulesAppointmentsDataGrid.SelectedItem == null)
            {
                nursePatientsSchedulesDataGrid.ItemsSource = null;
                selectedAppointment = null;
                selectedSchedule = null;
                nursePatientsSchedulesDataGrid.ItemsSource = null;
            }
            else
            {    
            dynamic _selectedAppointment = nursePatientsSchedulesAppointmentsDataGrid.SelectedItem;
            string _id = _selectedAppointment.Id;
            selectedAppointment = db.Appointments.Where(x => x.id == _id).FirstOrDefault();
                SetSchedulesData();
            }
        }

        public void SetSchedulesData()
        {
            var _schedules = db.Schedules.Where(x => x.appointmentId == selectedAppointment.id).ToList();
            var schedules = (from s in _schedules
                             where Convert.ToDateTime(s.dateTime)< DateTime.Now
                             orderby Convert.ToDateTime(s.dateTime) descending
                            select new
                            {
                                Id = s.id,
                                DateAndTime = Convert.ToDateTime(s.dateTime).ToString("dd.MM.yyyy HH:mm"),
                                Status = s.status,
                                Note = s.note,

                            }).ToList();
            nursePatientsSchedulesDataGrid.ItemsSource = schedules;
        }

        private void nursePatientsSchedulesAppointmentsDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            nursePatientsSchedulesAppointmentsDataGrid.Columns[0].Header = "Идентификатор";
            nursePatientsSchedulesAppointmentsDataGrid.Columns[1].Header = "Препарат или процедура";
            nursePatientsSchedulesAppointmentsDataGrid.Columns[2].Header = "Назначивший врач";
            nursePatientsSchedulesAppointmentsDataGrid.Columns[3].Header = "Дополнительная инфомация";

            nursePatientsSchedulesAppointmentsDataGrid.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsSchedulesAppointmentsDataGrid.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsSchedulesAppointmentsDataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsSchedulesAppointmentsDataGrid.Columns[3].Width = new DataGridLength(1, DataGridLengthUnitType.Star);

            nursePatientsSchedulesAppointmentsDataGrid.Columns[0].Visibility = Visibility.Collapsed;

            nursePatientsSchedulesAppointmentsDataGrid.SelectedIndex = 0;
        }

        private void nursePatientsSchedulesDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            if (nursePatientsSchedulesDataGrid.SelectedItem == null)
            {
                nursePatientsSchedulesFormAlterStatus.IsEnabled = false;
                nursePatientsSchedulesFormAlterNote.IsEnabled = false;
                selectedSchedule = null;
            }
            else
            {
                nursePatientsSchedulesFormAlterStatus.IsEnabled = true;
                nursePatientsSchedulesFormAlterNote.IsEnabled = true;
                dynamic _selectedSchedule = nursePatientsSchedulesDataGrid.SelectedItem;
                string _id = _selectedSchedule.Id;
                selectedSchedule = db.Schedules.Where(x => x.id == _id).FirstOrDefault();
            }
        }

        private void nursePatientsSchedulesDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            nursePatientsSchedulesDataGrid.Columns[0].Header = "Идентификатор";
            nursePatientsSchedulesDataGrid.Columns[1].Header = "Дата и время";
            nursePatientsSchedulesDataGrid.Columns[2].Header = "Статус";
            nursePatientsSchedulesDataGrid.Columns[3].Header = "Дополнительная инфомация";

            nursePatientsSchedulesDataGrid.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsSchedulesDataGrid.Columns[1].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsSchedulesDataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            nursePatientsSchedulesDataGrid.Columns[3].Width = new DataGridLength(1, DataGridLengthUnitType.Star);

            nursePatientsSchedulesDataGrid.Columns[0].Visibility = Visibility.Collapsed;

            nursePatientsSchedulesDataGrid.SelectedIndex = 0;
        }
        private void nursePatientsSchedulesFormAlterStatus_Click(object sender, RoutedEventArgs e)
        {
            if(selectedSchedule.status != completed)
                selectedSchedule.status = completed;
            else
                selectedSchedule.status = uncompleted;

            db.Schedules.AddOrUpdate(selectedSchedule);
            db.SaveChanges();
            SetSchedulesData();

        }
        private void nursePatientsSchedulesFormAlterNote_Click(object sender, RoutedEventArgs e)
        {
            OpenInfoForm();
        }

        public void OpenInfoForm()
        {
            nursePatientsSchedulesForm.IsEnabled = false;
            nursePatientsScheduleFormLabel.Content = $"{selectedSchedule.appointment.drugProcedure.name} в {selectedSchedule.dateTime}";
            if (!string.IsNullOrEmpty(selectedSchedule.note))
                nursePatientsScheduleFormNote.Text = selectedSchedule.note;
            nursePatientsScheduleForm.Visibility = Visibility.Visible;
        }

        private void nursePatientsSchedulesFormClose_Click(object sender, RoutedEventArgs e)
        {
            CloseSchedulesForm();
        }
        public void OpenSchedulesForm()
        {
            nursePatientsMainPart.IsEnabled = false;

            nursePatientsSchedulestLabel.Content = $"Расписание пациента \"{selectedPatient.patient.fullName}\"";
            SetAppointments();

            nursePatientsSchedulesForm.Visibility = Visibility.Visible;
        }

        public void SetAppointments()
        {
            var _appointments = db.Appointments.Where(x => x.registrationId == selectedPatient.id).ToList();
            var appointments = (from a in _appointments
                               select new
                               {
                                   Id = a.id,
                                   DrugOrProcedure = a.drugProcedure?.name,
                                   Doctor = a.doctor?.fullName,
                                   Note = a.note
                               }).ToList();
            nursePatientsSchedulesAppointmentsDataGrid.ItemsSource = appointments;
        }

        public void CloseSchedulesForm()
        {
            nursePatientsSchedulesForm.Visibility = Visibility.Collapsed;
            nursePatientsMainPart.IsEnabled = true;
        }

        #region Дополнительная информация
        private void nursePatientsScheduleFormAccept_Click(object sender, RoutedEventArgs e)
        {
            if(selectedSchedule.note != nursePatientsScheduleFormNote.Text)
            {
                selectedSchedule.note = nursePatientsScheduleFormNote.Text;
                db.Schedules.AddOrUpdate(selectedSchedule);
                db.SaveChanges();
            }
            CloseInfoForm();

        }
        private void nursePatientsScheduleFormCancel_Click(object sender, RoutedEventArgs e)
        {
            CloseInfoForm();
        }
        public void CloseInfoForm()
        {
            nursePatientsScheduleForm.Visibility = Visibility.Collapsed;
            nursePatientsScheduleFormLabel.Content = string.Empty;
            nursePatientsScheduleFormNote.Text = string.Empty;
            SetSchedulesData();
            nursePatientsSchedulesForm.IsEnabled = true;
        }
        #endregion

        #endregion

    }
}
